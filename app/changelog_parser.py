import re
from app.github import GitHubService
from app.db_handler import DbHandler
from flask_service_tools import Config, AIGatewayClient
from .logger import global_logger


class ChangelogParser:
    """
    Analyse le contenu d'un changelog pour en extraire des sections sp√©cifiques.
    """

    def __init__(self):
        self.github_service = None
        self.ai_client = AIGatewayClient(Config.AI_GATEWAY_URL, global_logger)

    def extract_version_section(self, changelog_content, version_prefix_input):
        """
        Extrait une section sp√©cifique du changelog bas√©e sur un pr√©fixe/num√©ro de version.
        Le format attendu est: "***** ChangeLog for <version> compared to ... *****"

        Args:
            changelog_content (str): Contenu complet du changelog.
            version_prefix_input (str): Version √† rechercher (ex: "22.0.0", "22.0", "22").

        Returns:
            list: Une liste de lignes pour la section trouv√©e, ou une liste vide si non trouv√©e.
        """
        section_lines = []
        in_section = False

        # Pattern pour trouver la ligne d'en-t√™te de la section pour la version souhait√©e.
        # Ex: si version_prefix_input="22.0.0", cherche "***** ChangeLog for 22.0.0 compared to ... *****"
        # Ex: si version_prefix_input="22", cherche "***** ChangeLog for 22 (ou 22.x.y) compared to ... *****"
        # On √©chappe version_prefix_input car il peut contenir des points.
        # (?:[.\d]*) permet de matcher des suffixes comme .0 or .0.0 si l'utilisateur entre seulement "22"
        section_header_pattern_str = (
            f"^\\*\\*\\*\\*\\* ChangeLog for {re.escape(version_prefix_input)}.0.0(?:[.\\d]*)?"
            f" compared to .* \\*\\*\\*\\*\\*$"
        )
        section_header_pattern = re.compile(section_header_pattern_str)

        # Pattern pour d√©tecter le d√©but de N'IMPORTE QUELLE section de changelog, pour marquer la fin de la section courante.
        any_changelog_header_pattern = re.compile(r"^\*\*\*\*\* ChangeLog for .* compared to .* \*\*\*\*\*$")

        print(f"‚ÑπÔ∏è  Recherche de la section pour la version commen√ßant par '{version_prefix_input}'...")
        print(f"   (Pattern utilis√©: {section_header_pattern_str})")

        lines = changelog_content.splitlines()
        for i, line in enumerate(lines):
            if not in_section:
                if section_header_pattern.match(line):
                    in_section = True
                    section_lines.append(line)  # Inclure la ligne d'en-t√™te
                    print(f"‚úÖ Section trouv√©e, commen√ßant par : {line}")
            else:
                # Si nous sommes dans une section, v√©rifier si la ligne actuelle est l'en-t√™te d'une *autre* section.
                # Important: s'assurer que ce n'est pas la m√™me ligne qui a d√©marr√© la section (au cas o√π une seule ligne serait retourn√©e)
                # Toutefois, la logique correcte est de simplement v√©rifier si c'est un *autre* en-t√™te.
                # La ligne qui a d√©marr√© la section a d√©j√† √©t√© ajout√©e.
                if any_changelog_header_pattern.match(line):
                    # C'est l'en-t√™te d'une section suivante, donc la section actuelle est termin√©e.
                    print(f"‚ÑπÔ∏è  Fin de la section d√©tect√©e √† la ligne : {line}")
                    break
                section_lines.append(line)

        if not section_lines:
            print(f"‚ö†Ô∏è Aucune section trouv√©e pour la version '{version_prefix_input}' ou commen√ßant par celle-ci.")
        return section_lines

    def determine_line_type_and_process_db(self, db_handler, section_lines):
        """
        D√©termine le type de chaque ligne de contenu pertinente et l'ins√®re dans la base de donn√©es.
        Les en-t√™tes de section, s√©parateurs, et l'en-t√™te principal du changelog sont ignor√©s pour l'insertion.
        """
        print(
            f"‚ÑπÔ∏è  Pr√©paration de l'insertion des lignes de contenu dans la table {db_handler.table_name}..."
        )
        # current_db_line_type sera 'user' ou 'dev' pour les √©l√©ments de changelog.
        # Initialis√© √† None pour les lignes qui pourraient appara√Ætre avant une section d√©finie.
        current_db_line_type = None
        lines_inserted_count = 0
        # La phrase exacte √† ignorer (en minuscules pour une comparaison insensible √† la casse)
        # Assurez-vous que cette phrase correspond exactement, y compris la ponctuation finale comme le ':' si pr√©sent.
        warning_preamble_line_to_skip = "the following changes may create regressions for some external modules, but were necessary to make dolibarr better:"

        for line_text in section_lines:
            stripped_line = line_text.strip()

            # 1. Ignorer les lignes compl√®tement vides
            if not stripped_line:
                continue

            # 2. Identifier les en-t√™tes de section et les lignes de contr√¥le pour mettre √† jour le contexte
            #    et sauter leur insertion.
            if stripped_line.lower() == "for users:":
                current_db_line_type = "user"
                print(f" contexte chang√© √† : {current_db_line_type}")
                continue  # Ne pas ins√©rer cette ligne d'en-t√™te
            elif stripped_line.lower() == "for developers:":
                current_db_line_type = "dev"
                print(f" contexte chang√© √† : {current_db_line_type}")
                continue  # Ne pas ins√©rer cette ligne d'en-t√™te
            elif stripped_line.lower() == "warning:":
                current_db_line_type = "dev"  # Changement: les avertissements sont maintenant de type 'dev'
                print(f" contexte chang√© √† : {current_db_line_type} (depuis la section Warning)")
                continue  # Ne pas ins√©rer cette ligne d'en-t√™te
            elif stripped_line.startswith("***** ChangeLog for") and stripped_line.endswith("*****"):
                current_db_line_type = None  # R√©initialiser le contexte apr√®s l'en-t√™te principal
                continue  # Ne pas ins√©rer l'en-t√™te principal du changelog
            elif re.fullmatch(r"^-+$", stripped_line): # V√©rifie si la ligne est constitu√©e uniquement de tirets (au moins un)
                continue  # Ne pas ins√©rer les lignes de s√©paration
            elif stripped_line.lower() == warning_preamble_line_to_skip:
                print(f"  Ligne de pr√©ambule Warning ignor√©e : {stripped_line[:60]}...")
                continue

            # 3. Si nous sommes arriv√©s ici, la ligne n'est pas vide, ni un en-t√™te, ni un s√©parateur.
            #    C'est donc une ligne de contenu √† ins√©rer.
            #    Le type √† utiliser pour la base de donn√©es est la valeur actuelle de current_db_line_type.
            #    Si aucune section n'a encore √©t√© rencontr√©e, current_db_line_type sera None,
            #    et la ligne sera ins√©r√©e avec un type NULL dans la BDD, ce qui est acceptable.

            # Ins√©rer la ligne nettoy√©e (stripped_line) pour la coh√©rence et la contrainte UNIQUE.
            inserted_id = db_handler.insert_changelog_line(
                line_content=stripped_line,
                line_type=current_db_line_type
            )

            if inserted_id is not None:
                lines_inserted_count += 1

        print(
            f"‚úÖ {lines_inserted_count} nouvelle(s) ligne(s) de contenu ins√©r√©e(s) dans la table {db_handler.table_name}.")

    def _extract_pr_number_from_text(self, text: str):  # Ajout de self
        """
        Extrait le premier num√©ro de PR (ex: #12345) d'une cha√Æne de caract√®res.
        """
        if not text: return None
        match = re.search(r"#(\d+)", text)
        return int(match.group(1)) if match else None

    def _get_pr_details_by_number(self,
                                  pr_number: int):  # Ajout de self, github_service est accessible via self.github_service
        """
        R√©cup√®re les d√©tails et le lien d'une PR via son num√©ro.
        Retourne (pr_details, pr_link) ou (None, None) en cas d'√©chec.
        """
        print(f"  PR #Ô∏è‚É£ Tentative de r√©cup√©ration des d√©tails pour PR #{pr_number}")

        pr_details = self.github_service.get_pr_details(pr_number)
        if pr_details:
            pr_link = pr_details.get('html_url')
            if not pr_link:
                print(f"  ‚ö†Ô∏è PR #{pr_number}: html_url non trouv√© dans les d√©tails.")
            return pr_details, pr_link
        print(f"  ‚ö†Ô∏è Impossible de r√©cup√©rer les d√©tails pour la PR #{pr_number}.")
        return None, None

    def _search_pr_by_description(self, line_content: str):  # Ajout de self
        """
        Recherche une PR par description (contenu de la ligne).
        Retourne (pr_details, pr_number, pr_link) ou (None, None, None) et une raison d'√©chec.
        """
        print("  PR üîç Recherche de PR par description...")
        search_term_full = line_content.strip()

        if ":" in search_term_full:
            potential_search_term = search_term_full.split(":", 1)[1].strip()
            search_term = potential_search_term if len(potential_search_term) > 10 else search_term_full
        else:
            search_term = search_term_full

        search_term = search_term[:150]
        if len(search_term) < 10:
            reason = f"Terme de recherche trop court: '{search_term}'"
            print(f"  ‚ö†Ô∏è {reason}")
            return None, None, None, reason

        found_prs = self.github_service.search_prs_by_text(search_term, only_merged=True)

        if not found_prs or not isinstance(found_prs, list):
            reason = f"Aucune PR trouv√©e ou erreur de recherche pour '{search_term}'."
            print(f"  PR ‚ùå {reason}")
            return None, None, None, reason

        if len(found_prs) == 1:
            pr_data_from_search = found_prs[0]
            pr_number_from_search = pr_data_from_search.get('number')
            if not pr_number_from_search:
                reason = f"PR trouv√©e par recherche sans num√©ro: {pr_data_from_search.get('title', 'N/A')}"
                print(f"  ‚ö†Ô∏è {reason}")
                return None, None, None, reason

            print(
                f"  PR ‚úÖ Une seule PR trouv√©e par recherche : #{pr_number_from_search} - {pr_data_from_search.get('title', 'N/A')}")

            pr_details, pr_link = self._get_pr_details_by_number(pr_number_from_search)
            if pr_details:
                return pr_details, pr_number_from_search, pr_link, None
            else:
                reason = f"Impossible de r√©cup√©rer les d√©tails pour la PR #{pr_number_from_search} trouv√©e par recherche."
                print(f"  ‚ö†Ô∏è {reason}")
                return None, None, None, reason
        else:
            reason = f"{len(found_prs)} PRs trouv√©es pour '{search_term}', ambigu√Øt√©."
            print(f"  PR ‚ö†Ô∏è {reason}")
            return None, None, None, reason

    def _attempt_pr_identification(self, line_content: str):  # Ajout de self
        """
        Tente d'identifier une PR, d'abord par num√©ro direct, puis par recherche.
        Retourne un dictionnaire de statut.
        """

        pr_number = self._extract_pr_number_from_text(line_content)

        if pr_number:
            pr_details, pr_link = self._get_pr_details_by_number(pr_number)
            if pr_details:
                return {'status': 'success', 'pr_details': pr_details, 'pr_number': pr_number, 'pr_link': pr_link}
            else:
                return {'status': 'failure',
                        'reason': f'D√©tails PR #{pr_number} (extraite directement) non r√©cup√©rables'}


        pr_details, pr_number_search, pr_link_search, reason = self._search_pr_by_description(line_content)
        if pr_details:
            return {'status': 'success', 'pr_details': pr_details, 'pr_number': pr_number_search,
                    'pr_link': pr_link_search}
        else:
            return {'status': 'failure', 'reason': reason or "Aucune PR identifiable par description"}
        
        
    def _prepare_data_for_llm_and_db(self, line_content: str, pr_info: dict, pr_diff_content: str, changelog_line_type: str = 'user'):
        """
        Pr√©pare les donn√©es pour la DB et le prompt LLM.
        Le prompt LLM est adapt√© en fonction du type de public ('user' ou 'dev')
        et instruit le LLM de se baser sur la ligne originale du changelog,
        les d√©tails de la PR et le diff.

        Args:
            line_content (str): Le contenu original de la ligne du changelog.
            pr_info (dict): Dictionnaire des informations de la PR identifi√©e
                            (incluant 'pr_details', 'pr_number', 'pr_link').
            pr_diff_content (str): Le contenu textuel du diff de la PR.
            changelog_line_type (str, optional): Type de la ligne ('user' ou 'dev').
                                                 D√©termine le style du r√©sum√© LLM. D√©faut 'user'.

        Returns:
            tuple: Un tuple contenant (db_update_payload: dict, llm_prompt: str).
        """
        pr_details = pr_info['pr_details']
        pr_number = pr_info['pr_number']
        pr_link = pr_info['pr_link']

        pr_title = pr_details.get('title', '')
        pr_description = pr_details.get('body', '')

        db_update_payload = {
            'pr_desc': f"Titre PR: {pr_title}\n\nDescription PR:\n{pr_description if pr_description else 'Aucune description fournie.'}",
            'link': pr_link,
            'diff': pr_diff_content,
            'type': changelog_line_type,
            'not_supported': False,
            'not_supported_reason': None
        }

        # D√©finition de l'instruction pour le r√©sum√©, en incluant la line_content
        if changelog_line_type == 'dev':
            summary_instruction = (
                "En te basant sur la 'Ligne originale du changelog', la description de la PR et son diff, "
                "g√©n√®re un r√©sum√© technique concis (1 √† 2 phrases maximum). Ce r√©sum√© doit expliquer "
                "la nature et l'impact technique principal du changement pour un autre d√©veloppeur. "
                "Si l'ensemble de ces informations n'est pas suffisant pour un r√©sum√© pertinent, indique 'Information insuffisante pour r√©sumer'."
            )
            audience_target = "un d√©veloppeur"
        else: # 'user' ou autre
            summary_instruction = (
                "En te basant sur la 'Ligne originale du changelog' et les d√©tails techniques fournis (description PR, diff), "
                "reformule cette nouveaut√© ou correction en 1 √† 2 phrases simples pour un utilisateur final de Dolibarr. "
                "Explique clairement ce que cela change ou apporte pour lui dans son utilisation quotidienne, en √©vitant le jargon technique. "
                "Indique comment acc√©der au fonctionnalit√©, comme si l'utilisateur √©tait vraiment d√©butant sur l'outil. "
                "Si l'ensemble de ces informations n'est pas suffisant pour un r√©sum√© pertinent, indique 'Information insuffisante pour r√©sumer'."
            )
            audience_target = "un utilisateur final de Dolibarr"

        llm_prompt = f"""Contexte : Tu es un assistant IA charg√© de r√©diger des notes de version claires et concises pour le logiciel Dolibarr, en adaptant le message √† l'audience cible.
    
    Informations disponibles pour g√©n√©rer le r√©sum√© :
    
    1.  **Ligne originale du changelog :** "{line_content}"
    
    2.  **Informations techniques de la Pull Request (PR) #{pr_number} associ√©e :**
        * Titre de la PR : {pr_title}
        * Description de la PR :
            {pr_description if pr_description else "Aucune description fournie."}
    
    3.  **Diff des modifications (extrait potentiellement tronqu√©) :**
        ```diff
    {pr_diff_content[:3500]}
        ```
        (Note: Le diff ci-dessus peut √™tre tronqu√© √† 3500 caract√®res.)
    
    Ta t√¢che est de g√©n√©rer un r√©sum√© pour {audience_target}.
    
    Instruction sp√©cifique pour le r√©sum√© :
    {summary_instruction}
    
    R√®gles importantes pour le r√©sum√© :
    - Ne mentionne PAS le num√©ro de la PR.
    - Commence directement par le r√©sum√©.
    - Si tu estimes que l'information est insuffisante, r√©ponds UNIQUEMENT par la phrase 'Information insuffisante pour r√©sumer'.
    """

        print(f"  LLM ü§ñ Prompt pour LLM (type: {changelog_line_type}, bas√© sur line_content+PR) pr√©par√© (longueur approx: {len(llm_prompt)}).")
        print("  ‚ú® Donn√©es pr√™tes pour m√†j BD et prompt LLM g√©n√©r√©.")

        return db_update_payload, llm_prompt
    
    def process_changelog_lines_refactored(self, db_handler: 'DbHandler', github_service: 'GitHubService'):
        """
        Traite les lignes du changelog en enrichissant chaque entr√©e.
        
        Pour chaque ligne du changelog non trait√©e:
        1. Identifie la PR GitHub associ√©e (par num√©ro ou recherche)
        2. R√©cup√®re les d√©tails de la PR (description, diff)  
        3. G√©n√®re un r√©sum√© explicatif via IA pour utilisateur final ou d√©veloppeur
        4. Met √† jour la ligne dans la base de donn√©es avec les informations enrichies
        
        Args:
            db_handler (DbHandler): Gestionnaire d'acc√®s √† la base de donn√©es
            github_service (GitHubService): Service d'acc√®s √† l'API GitHub
            
        Returns:
            str: Texte concat√©n√© des prompts et r√©sum√©s g√©n√©r√©s, ou None si aucune ligne √† traiter
            
        Note:
            Les lignes sont trait√©es par lots de 10 maximum pour √©viter la surcharge API
            Les erreurs sont g√©r√©es individuellement par ligne pour permettre le traitement des autres
        """
        lines_to_process = db_handler.get_lines_to_process(limit=10) #TODO Changer la limite
        self.github_service = github_service;
        if not lines_to_process:
            print("‚ÑπÔ∏è Aucune ligne √† traiter dans la base de donn√©es.")
            return
        
        print(f"üöÄ D√©but du traitement de {len(lines_to_process)} lignes du changelog...")
        all_generated_prompts = []
        for line_row in lines_to_process:
            line_id = line_row['id']
            line_content = line_row['line_content']
            db_update_payload = None # Initialisation pour chaque ligne
        
            if line_content is None:
                print(f"  ‚ö†Ô∏è Ligne ID {line_id} a un contenu vide (None), ignor√©e.")
                db_update_payload = {'not_supported': True, 'not_supported_reason': 'Contenu de ligne vide (None)'}
                db_handler.update_changelog_line(line_id, db_update_payload)
                continue
        
            print(f"\nüîé Traitement de la ligne ID {line_id}: {line_content[:100]}...")
        
            pr_identification_result = self._attempt_pr_identification(line_content)
        
            if pr_identification_result['status'] == 'success':
                pr_info = pr_identification_result
                pr_number_identified = pr_info['pr_number']
        
                print(f"   DIFF üîÑ R√©cup√©ration du diff pour PR #{pr_number_identified}...")
                pr_diff_content = github_service.get_pr_diff(pr_number_identified)
        
                if pr_diff_content:
                    print(f"  DIFF ‚úÖ Diff r√©cup√©r√© (longueur: {len(pr_diff_content)} caract√®res).")
                    db_update_payload, generated_llm_prompt = self._prepare_data_for_llm_and_db(line_content, pr_info, pr_diff_content, line_row['type'])
                    print("  LLM ü§ñ Requ√™te envoy√©e √† l'IA...")
                    # print("-------------------------")
                    # print(generated_llm_prompt)
                    # print("-------------------------")
                    response = self.ai_client.chat_predict('chat-gpt4o-mini', messages=[{"role": "user", "content":generated_llm_prompt}])
                    # print(response)
                    print(
                        f"  LLM ‚úÖ R√©ponse re√ßue - Mod√®le: {response['model']}, Tokens prompt: {response['prompt_tokens']}, Tokens compl√©tion: {response['completion_tokens']}, Temps: {response['response_time_ms']}ms")
                    prompt_tokens = response["prompt_tokens"]
                    completion_tokens = response["completion_tokens"]
                    result = response["response"]
                    if generated_llm_prompt:  # C'est une bonne pratique de v√©rifier si le prompt n'est pas vide
                        all_generated_prompts.append(f"Ligne originale: {line_content}\n\nR√©sum√© g√©n√©r√©: {result}")
                        db_update_payload.update(
                            {'is_done': True, 'desc_and_diff_tokens': prompt_tokens + completion_tokens})
                else:
                    all_generated_prompts.append(f"Ligne originale: {line_content}\n\nPas de Diff trouv√©, pas de r√©sum√© g√©n√©r√©.")
                    reason = f'Diff non r√©cup√©rable pour PR #{pr_number_identified}'
                    print(f"  DIFF ‚ùå {reason}.")
                    db_update_payload = {'not_supported': True, 'not_supported_reason': reason}
            else: # √âchec de l'identification de la PR
                all_generated_prompts.append(
                    f"Ligne originale: {line_content}\n\nPas de PR trouv√©e, pas de r√©sum√© g√©n√©r√©.")
                reason = pr_identification_result.get('reason', 'Raison inconnue d\'√©chec d\'identification PR')
                print(f"  PR IDENTIFICATION ‚ùå {reason}")
                db_update_payload = {'not_supported': True, 'not_supported_reason': reason}
        
            if db_update_payload:
                db_handler.update_changelog_line(line_id, db_update_payload)
                print(f"  üíæ Ligne ID {line_id} mise √† jour dans la base de donn√©es.")
            else:
                # Ce cas ne devrait pas arriver si la logique est correcte,
                # car db_update_payload devrait toujours √™tre d√©fini.
                print(f"  ‚ö†Ô∏è Aucune action de mise √† jour pour la ligne ID {line_id} (inattendu).")

        if all_generated_prompts:
            prompt_separator = f"\n\n========== {line_row['type']} ==========\n\n"
            concatenated_prompts = prompt_separator.join(all_generated_prompts)

        print("\nüèÅ Traitement des lignes termin√©.")
        return concatenated_prompts

    #TODO Revoir la gestion des erreurs
    #TODO Refacto https://gemini.google.com/gem/coding-partner/aa5af5f2633f3ea4
    #TODO Gestion access manager sur branche √† part
    #TODO Readme pour expliquer comment √ßa fonctionne et comment utiliser